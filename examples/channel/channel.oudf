@kernel void mue(const dlong Ntotal,
                 const @restrict dfloat * Y) 
                 @restrict dfloat * MUE) 
{
  for(dlong n=0;n<Ntotal;++n;@tile(256,@outer,@inner)){
    if(n<Ntotal){
      const float x = X[n];
      const float y = Y[n];
      MUE[n] = p_nu*(1.0 + p_Anut*(1.0-y*y));
    }
  }
}

dfloat exact(dfloat y)
{
  const dfloat asq = 1.0 + 1.0/p_Anut;
  const dfloat ap = 2.0*p_nu*p_Anut/(log(asq - 1.0) - 0.5*p_Aint);
  return (ap/2.0/p_nu/p_Anut)*(log(asq - 1.0) - log(asq - y*y);
}

// Boundary conditions
void insVelocityDirichletConditions3D(bcData *bc)
{
  bc->uP = exact(bc->y);
  bc->vP = 0;
  bc->wP = 0;
}
